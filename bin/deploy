#!/usr/bin/env bash

#
# This script executes a deployment to the specified environment. If no
# environment is provided it will do nothing and output usage instructions.
#
# The environment should be specified as the first argument, e.g.:
#
#     ./bin/deploy staging|production
#
# In order to execute a deployment the following steps are taken:
#
#   1. Build the application. (this happens inside a docker container)
#   2. Copy the release artifact back to the host environment.
#   3. `ssh` into the target server and
#

set -e

APP=gifme
APP_ENV=${1:-none}

# shellcheck source=utils.sh
source bin/utils.sh

# determine the target server to deploy to
get_server() {
  case $APP_ENV in
    staging)
      echo "deploy@staging.gifme.pizza"
      ;;

    production)
      echo "deploy@gifme.pizza"
      ;;

    *)
      echo "none"
      ;;
  esac
}

# ensure a valid server was selected
SERVER=$(get_server "$APP_ENV")
if [ "$SERVER" = "none" ]; then
  echo_warning "Invalid server."
  echo_notice "Please specify: staging or production"
  exit 1
fi

# Don't accidently deploy from non-master branch
build_release() {
  if [ "$(git symbolic-ref HEAD --short)" != "master" ]; then
    echo_warning "You are not on the master branch and trying to build a release"
    BRANCH_CHOICE=$(echo_prompt "Are you sure you want to continue?" "(y/n)")
    case "$BRANCH_CHOICE" in
      y|Y ) echo "Building from non-master";;
      n|N ) echo "Exiting" && exit 1;;
      * ) echo "Invalid choice. Exiting" && exit 1;;
    esac
  fi

  # shellcheck source=build
  source ./bin/build
}

exit_if_dirty

CURRENT_VERSION=$(cat VERSION)

if [ -n "$CI" ]; then
  source ./bin/build-env-file
  source ./bin/build
else
  if [ "$APP_ENV" == "production" ]; then
    VERSION_CHOICE=$(echo_prompt "Bump the version?" "(y/n)")

    case "$VERSION_CHOICE" in
      y|Y)
        # shellcheck source=bump-version
        source bin/bump-version
        ;;

      n|N)
        echo "Skipping version bump"
        ;;

      *)
        echo_warning "Invalid choice. Exiting"
        exit 1
        ;;
    esac
  fi
  CURRENT_VERSION=$(cat VERSION)

  # Maybe build the release
  BUILD_CHOICE=$(echo_prompt "Build the new version?" "(y/n)")
  case "$BUILD_CHOICE" in
    y|Y ) echo "Building version" && build_release;;
    n|N ) echo "Skipping build";;
    * ) echo_warning "Invalid choice. Exiting" && exit 1;;
  esac

  # Ask what version to upload
  echo_notice "Current version: ${WHITE}${CURRENT_VERSION}"
  VERSION=$(echo_prompt "Specify version to upload" "[$CURRENT_VERSION]")
fi
if [ "$VERSION" = "" ]; then VERSION=$CURRENT_VERSION; fi


# Upload the release
RELEASE_FILENAME="$APP-$VERSION.tar.gz"
RELEASE_FILE="rel/artifacts/$RELEASE_FILENAME"

app_path="/var/www/$APP/$APP_ENV"
releases_path="$app_path/releases"
shared_path="$app_path/shared"
release_path="$releases_path/$VERSION"

if [ -f "$RELEASE_FILE" ]; then
  echo_notice "Uploading release"

  scp "$RELEASE_FILE" "$SERVER:$releases_path/$RELEASE_FILENAME"

  # Backup, unpack, restart the app, and migrate if necessary
  echo_notice "Backing up and restarting the app"

  # shellcheck disable=SC2087
  ssh "$SERVER" /bin/bash << EOF
  mkdir "$release_path" 2> /dev/null
  tar -C "$release_path" -xzf "$releases_path/$RELEASE_FILENAME"

  cd "$release_path"

  ln -snfv "$release_path" "$app_path/current"
  ln -snfv "$release_path/lib/ui-0.1.0/priv/static" "$app_path/public"

  rm -drf "$release_path/var/log" && \
    mkdir -p "$release_path/var" && \
    ln -sfnv "$shared_path/log" "$release_path/var/log"

  sudo systemctl restart "$APP"

  set -a && source "$shared_path/env.prod"

  echo "Success!"
EOF
else
  echo_warning "Could not find the release file: ${WHITE}$RELEASE_FILE"
  exit 1
fi
