aliases:
  # restore caches
  - &mix_caches
    keys:
      - v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
      - v1-mix-cache-{{ .Branch }}
      - v1-mix-cache

  - &build_caches
    keys:
      - v1-build-cache-{{ .Branch }}
      - v1-build-cache

  - &plt_cache
    keys:
      - v1-dialyzer-plt-cache

  # save caches
  - &save_mix_cache_checksum
    key: v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
    paths:
      - deps
      - ~/.mix

  - &save_mix_cache_branch
    key: v1-mix-cache-{{ .Branch }}
    paths:
      - deps
      - ~/.mix

  - &save_mix_cache_fallback
    key: v1-mix-cache
    paths:
      - deps
      - ~/.mix

  - &save_build_cache_branch
    key: v1-build-cache-{{ .Branch }}
    paths: _build

  - &save_build_cache_fallback
    key: v1-build-cache
    paths: _build

  - &save_plt_cache
    key: v1-dialyzer-plt-cache
    paths: _plts

defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: circleci/elixir:1.9.0
      environment:
        MIX_ENV: test

version: 2
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - run: mix local.hex --force
      - run: mix local.rebar --force

      - restore_cache: *mix_caches
      - restore_cache: *build_caches

      - run: mix deps.get
      - run: mix compile

      - save_cache: *save_mix_cache_checksum
      - save_cache: *save_mix_cache_branch
      - save_cache: *save_mix_cache_fallback
      - save_cache: *save_build_cache_branch
      - save_cache: *save_build_cache_fallback

  test:
    <<: *defaults
    steps:
      - checkout
      - run: sudo apt-get -y install inotify-tools
      - run: mkdir _reports

      - restore_cache: *mix_caches
      - restore_cache: *build_caches

      - run: mix coveralls.html

      - store_artifacts:
          path: cover
          destination: coverage_results

      - store_test_results:
          path: _reports

  docs:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: *mix_caches
      - restore_cache: *build_caches

      - run: mix docs

      - store_artifacts:
          path: docs
          destination: documentation

  typespecs:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: *mix_caches
      - restore_cache: *build_caches
      - restore_cache: *plt_cache

      - run: mix dialyzer --halt-exit-status

      - save_cache: *save_plt_cache

  format:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: *mix_caches

      - run: mix format --check-formatted

  deploy-staging:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Build and deploy release to staging
          command: ./bin/deploy staging

  deploy-production:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Build and deploy release to production
          command: ./bin/deploy production

      # - run:
      #     name: Set image name and tag
      #     command: |
      #       echo 'export TAG=0.1.${CIRCLE_BUILD_NUM}' >> $BASH_ENV
      #       echo 'export IMAGE_NAME=gifme' >> $BASH_ENV
      # - setup_remote_docker:
      #     docker_layer_caching: true
      # - run:
      #     name: Build Docker image and push to Docker Hub
      #     command: |
      #       docker build -t solomonhawk/$IMAGE_NAME:$TAG .
      #       echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
      #       docker push solomonhawk/$IMAGE_NAME:$TAG
      # - run:
      #     name: Deploy app to Digital Ocean Server via Docker
      #     command: |
      #       ssh -o StrictHostKeyChecking=no root@gifme.pizza "/bin/bash ./deploy_app.sh solomonhawk/$IMAGE_NAME:$TAG"

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - format:
          requires:
            - build
      - docs:
          requires:
            - build
      - typespecs:
          requires:
            - build
      - test:
          requires:
            - build
      - deploy-staging:
          requires:
            - format
            - docs
            - typespecs
            - test
          filters:
            branches:
              only: staging
      - deploy-production:
          requires:
            - format
            - docs
            - typespecs
            - test
          filters:
            branches:
              only: master
