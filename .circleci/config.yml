version: 2

attach_workspace: &attach_workspace
  attach_workspace:
    at: ~/repo

elixir_defaults: &elixir_defaults
  working_directory: ~/repo
  docker:
    - image: circleci/elixir:1.9.0-node-browsers
      environment:
        MIX_ENV: test
        HEX_HOME: /home/circleci/repo/.cache/hex
        MIX_HOME: /home/circleci/repo/.cache/mix
        DB_USER: root
    - image: circleci/postgres:10.4-alpine-ram
      environment:
        DB_NAME: gifme_test
        DB_USER: root

node_defaults: &node_defaults
  working_directory: ~/repo
  docker:
    - image: circleci/node:10.15.0
      environment:
        YARN_CACHE_FOLDER: /home/circleci/repo/.cache/yarn

version: 2
jobs:
  build:
    <<: *elixir_defaults
    steps:
      - checkout
      - *attach_workspace
      - restore_cache:
          key: v1-mix-{{ arch }}-{{ checksum ".tool-versions" }}-{{ checksum "mix.lock" }}

      - run: mkdir -p ~/repo/.cache/{hex,mix}
      - run: mix local.hex --if-missing --force
      - run: mix local.rebar --force
      - run: mix deps.get

      - save_cache:
          paths:
            - deps
            - .cache/hex
            - .cache/mix
          key: v1-mix-{{ arch }}-{{ checksum ".tool-versions" }}-{{ checksum "mix.lock" }}

      - run: mix compile --force --warnings-as-errors

      - persist_to_workspace:
          root: ~/repo
          paths:
            - .cache/hex
            - .cache/mix
            - deps
            - _build

  yarn-install:
    <<: *node_defaults
    steps:
      - checkout
      - *attach_workspace
      - restore_cache:
          key: v1-node-modules-{{ arch }}-{{ checksum ".tool-versions" }}-{{ checksum "apps/ui/assets/yarn.lock" }}
      - run:
          working_directory: apps/ui/assets
          command: yarn install
      - run:
          working_directory: apps/ui/assets
          command: yarn build-production
      - save_cache:
          paths:
            - apps/ui/assets/node_modules
            - .cache/yarn
          key: v1-node-modules-{{ arch }}-{{ checksum ".tool-versions" }}-{{ checksum "apps/ui/assets/yarn.lock" }}
      - persist_to_workspace:
          root: ~/repo
          paths:
            - apps/ui/assets/node_modules
            - apps/ui/priv/static

  test:
    <<: *elixir_defaults
    steps:
      - checkout
      - *attach_workspace
      - run: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run: sudo apt-get update
      - run: sudo apt-get -y install inotify-tools
      - run: sudo apt install -y postgresql-client || true
      - run: mix phx.digest
      - run: mix test --cover
      - store_test_results:
          path: ~/repo/tmp/test-results
      - store_artifacts:
          path: ~/repo/cover
          destination: exunit-coverage-report


      # - run: mkdir _reports

      # - restore_cache: *mix_caches
      # - restore_cache: *build_caches

      # - run: mix coveralls.html

      # - store_artifacts:
      #     path: cover
      #     destination: coverage_results

      # - store_test_results:
      #     path: _reports

  docs:
    <<: *elixir_defaults
    steps:
      - checkout
      - *attach_workspace
      - run: mix docs
      - store_artifacts:
          path: ~/repo/docs
          destination: documentation

  typespecs:
    <<: *elixir_defaults
    steps:
      - checkout
      - *attach_workspace
      - restore_cache:
          keys:
            - v3-dialyxir-lang-{{ checksum ".tool-versions" }}
      - restore_cache:
          keys:
            - v3-dialyxir-project-{{ checksum ".tool-versions" }}-{{ checksum "mix.lock" }}
      - run: mkdir -p ~/repo/.cache/{plt-core,plt-project}
      - run: mix dialyzer --halt-exit-status
      - save_cache:
          paths:
            - .cache/plt-core
          key: v3-dialyxir-lang-{{ checksum ".tool-versions" }}
      - save_cache:
          paths:
            - .cache/plt-project
          key: v3-dialyxir-project-{{ checksum ".tool-versions" }}-{{ checksum "mix.lock" }}

  format:
    <<: *elixir_defaults
    steps:
      - checkout
      - *attach_workspace
      - run: mix format --check-formatted

  deploy-staging:
    working_directory: ~/repo
    machine:
      image: circleci/classic:latest
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - '4c:7b:f0:25:e5:b3:8e:b8:5b:9c:c6:3b:d9:85:e8:de'
      - run:
          name: Build and deploy release to staging
          command: ./bin/deploy staging

  deploy-production:
    working_directory: ~/repo
    machine:
      image: circleci/classic:latest
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - '4c:7b:f0:25:e5:b3:8e:b8:5b:9c:c6:3b:d9:85:e8:de'
      - run:
          name: Set up artifacts directory
          command: mkdir -p rel/artifacts
      - run:
          name: Build and deploy release to production
          command: ./bin/deploy production

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - yarn-install:
          requires:
            - build
      - format:
          requires:
            - build
      - docs:
          requires:
            - build
      - typespecs:
          requires:
            - build
      - test:
          requires:
            - build
            - yarn-install
      - deploy-staging:
          context: gifme-staging
          requires:
            - format
            - docs
            - typespecs
            - test
          filters:
            branches:
              only: staging
      - deploy-production:
          context: gifme-production
          requires:
            - format
            - docs
            - typespecs
            - test
          filters:
            branches:
              only: master
